import os
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentTypes, CallbackQuery, ParseMode
from datetime import datetime, timedelta

from loader import dp
from view.keyboards.inline import kb_date, kb_cancel_fsm
from view.keyboards.standart import kb_cancel
from view.states import UploadFilePortals
from view.callback import admin_menu_31, menu_2_date


@dp.callback_query_handler(admin_menu_31.filter(level_a31='portal_file'))
async def upload_calls_count(call: CallbackQuery, admin: bool):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ state –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ
    """
    current_msg = call.message.message_id
    user_id = call.from_user.id
    if admin:
        await dp.bot.edit_message_text(text=f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Öüëáüèª:',
                                       chat_id=user_id, message_id=current_msg, reply_markup=kb_date(),
                                       parse_mode=ParseMode.HTML)
        await UploadFilePortals.catch_date.set()
    else:
        dp.bot.edit_message_text(text=f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
                                 chat_id=user_id, message_id=current_msg)


@dp.callback_query_handler(menu_2_date.filter(date_priority='yesterday'), state=UploadFilePortals.catch_date)
async def file_yesterday_date_catch(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞ –≤—á–µ—Ä–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    """
    current_msg = call.message.message_id
    user_id = call.from_user.id
    date_yesterday = datetime.now().date() - timedelta(days=1)
    await state.update_data({'catch_date': str(date_yesterday)})
    await dp.bot.edit_message_text(text=f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—Ä—Ç–∞–ª–∞ –∑–∞ {date_yesterday}:',
                                    chat_id=user_id, message_id=current_msg, reply_markup=kb_cancel_fsm,
                                       parse_mode=ParseMode.HTML)
    await UploadFilePortals.catch_file.set()


@dp.callback_query_handler(menu_2_date.filter(date_priority='bf_yesterday'), state=UploadFilePortals.catch_date)
async def file_bf_yesterday_date_catch(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    """
    current_msg = call.message.message_id
    user_id = call.from_user.id
    date_yesterday = datetime.now().date() - timedelta(days=2)
    await state.update_data({'catch_date': str(date_yesterday)})
    await dp.bot.edit_message_text(text=f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—Ä—Ç–∞–ª–∞ –∑–∞ {date_yesterday}:',
                                    chat_id=user_id, message_id=current_msg, reply_markup=kb_cancel_fsm,
                                       parse_mode=ParseMode.HTML)
    await UploadFilePortals.catch_file.set()


@dp.message_handler(state=UploadFilePortals.catch_date, content_types=ContentTypes.ANY)
async def file_date_catch(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    """
    try:
        data_obj = message.text
        up_data = datetime.strptime(data_obj, '%Y-%m-%d')
    except:
        await message.answer(text='–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ì–ì–ì–ì-–ú–ú-–î–î</b>',
                             parse_mode=ParseMode.HTML)
        UploadFilePortals.catch_date.set()
    else:
        await state.update_data({'catch_date': data_obj})
        await message.answer(text=f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ—Ä—Ç–∞–ª–∞ –∑–∞ {data_obj}:', reply_markup=kb_cancel)
        await UploadFilePortals.catch_file.set()


@dp.message_handler(state=UploadFilePortals.catch_file, content_types=ContentTypes.ANY)
async def portals_catch(message: Message, state: FSMContext):
    await message.answer(text=f'–ö–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    await state.reset_data()
    await state.finish()
    # if document := message.document:
    #     await state.update_data({'catch_file': True})
    #     await document.download(destination_file=f'./cred/{document.file_name}')
    #     try:
    #         os.rename(f'./cred/{document.file_name}', './cred/call.csv')
    #     except:
    #         os.remove('./cred/call.csv')
    #         os.rename(f'./cred/{document.file_name}', './cred/call.csv')
    #     finally:
    #         data = await state.get_data()
    #         try:
    #             result_upload = recording_call_database()
    #         except Exception as err:
    #             await message.answer(text=f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∫–æ–¥–∏—Ä–æ–≤–∫—É, —Ñ–æ—Ä–º–∞—Ç '
    #                                       f'–¥–∞–Ω–Ω—ã—Ö.\n–ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ: {err}')
    #             await state.reset_data()
    #             await state.finish()
    #         else:
    #             await state.reset_data()
    #             await state.finish()
    #             if result_upload:
    #                 await message.answer(text='–î–∞–Ω–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
    #                                      reply_markup=kb_admin_lev21)
    #             else:
    #                 await message.answer(text='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤. '
    #                                           '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª:'
    #                                           '—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∫–æ–¥–∏—Ä–æ–≤–∫—É, —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.', reply_markup=kb_admin_lev21)
    #         finally:
    #             try:
    #                 os.remove('./cred/call.csv')
    #             except Exception as err:
    #                 await message.answer(text=f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {err}')
    #                 await state.reset_data()
    #                 await state.finish()
