# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå–≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–π.
# üìå–ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.

import json


class Factorial:
    def __init__(self, limit: int):
        self.limit = limit
        self.storage = {}

    def _fact(self, num: int):
        factorial = []
        number = 1
        for i in range(1, num + 1):
            number *= i
            factorial.append(number)
        return factorial

    def __call__(self, number: int):
        result = self._fact(number)[-self.limit:]
        self.storage[number] = result
        return result

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        file = open('./fact_dict.json', 'w', encoding='UTF-8')
        json.dump(self.storage, file, indent=4)
        file.close()

if __name__ == '__main__':
    a = Factorial(2)
    print(a(5))
    print(a(10))
    print(a(6))
    print(a.storage)

    with Factorial(4) as fact:
        fact(20)
        fact(5)
        fact(3)
        fact(12)
